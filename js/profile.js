import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-app.js';
import {
    getAuth,
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signOut,
    onAuthStateChanged
} from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js';
import {
    getFirestore,
    doc,
    setDoc,
    getDoc
} from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js';

// === –ù–ê–°–¢–†–û–ô–ö–ò JUPYTERHUB ===
const JUPYTERHUB_API_URL = 'https://aistartlab-practice.ru/api/create_user';
const JUPYTERHUB_URL = 'https://aistartlab-practice.ru'; // <-- –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ JupyterHub

// Firebase –∫–æ–Ω—Ñ–∏–≥ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const firebaseConfig = {
    apiKey: "AIzaSyB2KpF2HDbDcB6D1P8MU6wGcnAdHCvFxcg",
    authDomain: "ai-start-lab-1ee12.firebaseapp.com",
    projectId: "ai-start-lab-1ee12",
    storageBucket: "ai-start-lab-1ee12.appspot.com",
    messagingSenderId: "489390775494",
    appId: "1:489390775494:web:97531e4b7ab542b2930bc7",
    measurementId: "G-NZNHV0Q18C"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const loginButton = document.getElementById('login-button');
const userMenu = document.getElementById('user-menu');
const userNameBtn = document.getElementById('user-name-btn');
const userDropdown = document.getElementById('user-dropdown');
const logoutBtn = document.getElementById('logout-btn');
const loginPopup = document.getElementById('login-popup');
const registerPopup = document.getElementById('register-popup');
const closeLoginBtn = document.getElementById('close-login');
const closeRegisterBtn = document.getElementById('close-register');
const popupAuthForm = document.getElementById('popup-auth-form');
const popupRegisterForm = document.getElementById('popup-register-form');
const showRegisterBtn = document.getElementById('show-register');
const showLoginBtn = document.getElementById('show-login');
const toast = document.getElementById('toast');
const toastMessage = document.getElementById('toast-message');
const toastCloseBtn = toast.querySelector('.close-toast');

// –ö—É—Ä—Å—ã
const freeCourseBtn = document.getElementById('free-course-btn');
const freeCourseLock = document.getElementById('free-course-lock');
const simplifiedCourse = document.getElementById('simplified-course');
const extendedCourse = document.getElementById('extended-course');
const fullCourse = document.getElementById('full-course');

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showToast(message) {
  toastMessage.textContent = message;
  toast.classList.add('show');
  setTimeout(() => {
    toast.classList.remove('show');
  }, 4000);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ
toastCloseBtn.addEventListener('click', () => {
  toast.classList.remove('show');
});

// –û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
loginButton.addEventListener('click', () => {
  showLoginPopup();
});

// –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–∞
closeLoginBtn.addEventListener('click', () => {
  loginPopup.classList.add('hidden');
});
closeRegisterBtn.addEventListener('click', () => {
  registerPopup.classList.add('hidden');
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –æ–∫–Ω–∞–º–∏
showRegisterBtn.addEventListener('click', () => {
  loginPopup.classList.add('hidden');
  registerPopup.classList.remove('hidden');
});
showLoginBtn.addEventListener('click', () => {
  registerPopup.classList.add('hidden');
  loginPopup.classList.remove('hidden');
});

// –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
window.addEventListener('click', (e) => {
  if (e.target === loginPopup) loginPopup.classList.add('hidden');
  if (e.target === registerPopup) registerPopup.classList.add('hidden');
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞
function showLoginPopup() {
  loginPopup.classList.remove('hidden');
  registerPopup.classList.add('hidden');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email
function validateEmail(email) {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
popupAuthForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const email = document.getElementById('popup-email').value.trim();
  const password = document.getElementById('popup-password').value;

  if (!validateEmail(email)) {
    showToast('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
    return;
  }

  try {
    await signInWithEmailAndPassword(auth, email, password);
    showToast('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    loginPopup.classList.add('hidden');
  } catch (error) {
    showToast('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
popupRegisterForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  const email = document.getElementById('register-email').value.trim();
  const password = document.getElementById('register-password').value;
  const passwordRepeat = document.getElementById('register-password-repeat').value;

  if (!validateEmail(email)) {
    showToast('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
    return;
  }

  if (password !== passwordRepeat) {
    showToast('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    return;
  }

  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase Auth
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore —Å —Ä–æ–ª—å—é "basic"
    await setDoc(doc(db, "allowed_users", user.uid), {
      email: user.email,
      role: "basic",
      createdAt: new Date()
    });

    showToast('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
    registerPopup.classList.add('hidden');
  } catch (error) {
    showToast('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message);
  }
});

// –í—ã—Ö–æ–¥
logoutBtn.addEventListener('click', async () => {
  try {
    await signOut(auth);
    showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.');
  } catch (error) {
    showToast('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ' + error.message);
  }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫—É—Ä—Å–∞–º
function updateCoursesByRole(role) {
  // –°–∫—Ä—ã—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã –∫—Ä–æ–º–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ
  simplifiedCourse.classList.add('hidden-course');
  extendedCourse.classList.add('hidden-course');
  fullCourse.classList.add('hidden-course');

  // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
  freeCourseBtn.disabled = false;
  freeCourseBtn.classList.add('unlocked');
  freeCourseBtn.title = "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É";
  freeCourseLock.textContent = "üîì";
  freeCourseLock.classList.add('unlocked');
  freeCourseLock.title = "–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç";

  // –û—Ç–∫—Ä—ã–≤–∞—Ç—å –∫—É—Ä—Å—ã –ø–æ —Ä–æ–ª—è–º
  if (role === "simple" || role === "admin") {
    simplifiedCourse.classList.remove('hidden-course');
  }
  if (role === "intermediate" || role === "admin") {
    extendedCourse.classList.remove('hidden-course');
  }
  if (role === "full" || role === "admin") {
    fullCourse.classList.remove('hidden-course');
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É (–¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ basic)
function updateFreeCourseAccess(isAuthorized, userRole) {
  if (isAuthorized) {
    // –í—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    freeCourseBtn.disabled = false;
    freeCourseBtn.classList.add('unlocked');
    freeCourseBtn.title = "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É";
    freeCourseLock.textContent = "üîì";
    freeCourseLock.classList.add('unlocked');
    freeCourseLock.title = "–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç";
  } else {
    // –¢–æ–ª—å–∫–æ –∑–∞–º–æ–∫ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    freeCourseBtn.disabled = true;
    freeCourseBtn.classList.remove('unlocked');
    freeCourseBtn.title = "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö";
    freeCourseLock.textContent = "üîí";
    freeCourseLock.classList.remove('unlocked');
    freeCourseLock.title = "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö";
  }
  // –°–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ basic
  simplifiedCourse.classList.add('hidden-course');
  extendedCourse.classList.add('hidden-course');
  fullCourse.classList.add('hidden-course');
}

// === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° JUPYTERHUB –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ ===
freeCourseBtn.addEventListener('click', async () => {
  const user = auth.currentUser;
  if (!user) {
    showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç');
    return;
  }

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
    const userDocRef = doc(db, "allowed_users", user.uid);
    const userDocSnap = await getDoc(userDocRef);

    if (!userDocSnap.exists() || userDocSnap.data().role !== "basic") {
      showToast('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É');
      return;
    }

    // 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è JupyterHub
    const jhubUsername = user.email.replace(/[^a-zA-Z0-9]/g, '_');
    const jhubPassword = user.uid;

    // 3. –ü–æ–ª—É—á–∞–µ–º _xsrf –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const loginPageResponse = await fetch('https://aistartlab-practice.ru/hub/login ', {
      method: 'GET',
      credentials: 'include',
      redirect: 'manual'  // ‚ùó –í–ê–ñ–ù–û: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç
    });

    const html = await loginPageResponse.text();
    const xsrfMatch = html.match(/name="_xsrf" value="([^"]+)"/);
    const xsrfToken = xsrfMatch ? xsrfMatch[1] : null;

    if (!xsrfToken) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å _xsrf –∏–∑ HTML");
    }

    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const createUserResponse = await fetch(JUPYTERHUB_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        username: jhubUsername, 
        password: jhubPassword, 
        role: 'basic',
        _xsrf: xsrfToken  // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –≤ —Ç–µ–ª–µ
      }),
      credentials: 'include'
    });

    const userData = await createUserResponse.json();
    if (!createUserResponse.ok || userData.status !== 'ok') {
      showToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JupyterHub');
      return;
    }

    // 5. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏ API
    const tokenResponse = await fetch(JUPYTERHUB_API_URL.replace('/create_user', '/get_jhub_token'), {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        username: jhubUsername, 
        password: jhubPassword,
        _xsrf: xsrfToken
      }),
      credentials: 'include'
    });

    if (!tokenResponse.ok) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω");
    }

    const tokenData = await tokenResponse.json();
    const token = tokenData.token;

    // 6. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ JupyterHub —Å —Ç–æ–∫–µ–Ω–æ–º
    window.open(`https://aistartlab-practice.ru/user/ ${jhubUsername}/lab?token=${token}`, '_blank');

  } catch (error) {
    showToast(`–û—à–∏–±–∫–∞: ${error.message}`);
  }
});

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
onAuthStateChanged(auth, async (user) => {
  if (user) {
    loginButton.classList.add('hidden');
    loginButton.style.display = 'none';
    loginButton.setAttribute('aria-hidden', 'true');
    userMenu.classList.remove('hidden');
    userMenu.style.display = 'flex';
    userMenu.setAttribute('aria-hidden', 'false');
    userNameBtn.textContent = user.email;
    userDropdown.classList.add('hidden');
    userNameBtn.onclick = () => {
      userDropdown.classList.toggle('hidden');
    };

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
    try {
      const userDocRef = doc(db, "allowed_users", user.uid);
      const userDocSnap = await getDoc(userDocRef);
      let userRole = "basic";
      if (userDocSnap.exists() && userDocSnap.data().role) {
        userRole = userDocSnap.data().role;
      }
      updateFreeCourseAccess(true, userRole);
      updateCoursesByRole(userRole);
    } catch (e) {
      updateFreeCourseAccess(true, "basic");
      updateCoursesByRole("basic");
    }
  } else {
    loginButton.classList.remove('hidden');
    loginButton.style.display = 'inline-block';
    loginButton.setAttribute('aria-hidden', 'false');
    userMenu.classList.add('hidden');
    userMenu.style.display = 'none';
    userMenu.setAttribute('aria-hidden', 'true');
    userDropdown.classList.add('hidden');
    userNameBtn.textContent = '';

    updateFreeCourseAccess(false, null);
  }
});
